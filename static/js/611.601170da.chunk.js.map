{"version":3,"file":"static/js/611.601170da.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  margin-left: 50px;\n  margin-bottom: 10px;\n`;\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nexport const CastItem = styled.li`\n  margin-bottom: 10px;\n  width: 10%;\n`;\nexport const Block = styled.div``;\n\nexport const Image = styled.img`\n  width: 150px;\n  border-radius: 10px;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  font-size: 12px;\n\n  width: auto;\n`;\n\nexport const CastName = styled.p`\n  font-size: 14px;\n  font-weight: 700;\n  width: auto;\n`;\n","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from '../../services/api.js';\nimport { useParams } from 'react-router-dom';\nimport {\n  Title,\n  CastList,\n  CastItem,\n  Block,\n  Image,\n  Text,\n  CastName,\n} from './Cast.styled.jsx';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'components/Loader/Loader';\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nexport function Cast() {\n  const { moviesId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getCastInfo(moviesId);\n\n        if (data.cast.length === 0) {\n          setError('Oooops! There is no cast info');\n        } else {\n          setCast(data.cast);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getCast();\n  }, [moviesId]);\n\n  return (\n    <Block>\n      <Title>Cast</Title>\n      <CastList>\n        {cast.slice(0, 10).map(cast => (\n          <CastItem key={cast.id}>\n            {cast.profile_path ? (\n              <Image\n                src={`${TheMovieDbAPI.IMG_URL + cast.profile_path}`}\n                alt={cast.name}\n              />\n            ) : (\n              <Loader />\n            )}\n            <CastName>{cast.name}</CastName>\n            <Text>Character: {cast.character}</Text>\n          </CastItem>\n        ))}\n      </CastList>\n      {error && <p>{error}</p>}\n    </Block>\n  );\n}\nCast.propTypes = {\n  moviesId: PropTypes.number,\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h3`\n  margin-left: 50px;\n  margin-bottom: 10px;\n`;\n\nexport const ReviewsList = styled.ul`\n  margin-left: 50px;\n  margin-bottom: 10px;\n  list-style: none;\n`;\n\nexport const ReviewsItem = styled.li`\n  margin-bottom: 10px;\n`;\nexport const Block = styled.div``;\nexport const Text = styled.p`\n  margin-left: 50px;\n  margin-top: 10px;\n  width: 90%;\n`;\n","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from '../../services/api.js';\nimport { useParams } from 'react-router-dom';\nimport {\n  Title,\n  Block,\n  Text,\n  ReviewsList,\n  ReviewsItem,\n} from './Reviews.styled.jsx';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nexport function Reviews() {\n  const { moviesId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getReviews(moviesId);\n\n        if (data.results.length === 0) {\n          setError('Oooops! There is no reviews');\n        } else {\n          setReviews(data.results);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getReviews();\n  }, [moviesId]);\n\n  return (\n    <Block>\n      <Title>Reviews</Title>\n\n      <ReviewsList>\n        {reviews.map(review => (\n          <ReviewsItem key={review.id}>\n            <h4>Author: {review.author}</h4>\n            <Text>{review.content}</Text>\n          </ReviewsItem>\n        ))}\n      </ReviewsList>\n\n      {error && <p>{error}</p>}\n    </Block>\n  );\n}\n\nReviews.propTypes = {\n  moviesId: PropTypes.number,\n};\n","import styled from 'styled-components';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const Block = styled.div`\n  display: flex;\n  gap: 20px;\n  margin: 20px 40px;\n`;\n\nexport const Image = styled.img`\n  height: 400px;\n  border-radius: 10px;\n`;\n\nexport const InfoBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  width: 500px;\n`;\n\nexport const Title = styled.h3`\n  margin-left: 40px;\n`;\nexport const LinkStyled = styled(Link)`\n  margin-top: 30px;\n  margin-left: 40px;\n  display: inline-block;\n  background-color: #f39c1c;\n  color: #fff;\n  border: none;\n  padding: 0.5rem 1rem;\n  text-align: center;\n  text-decoration: none;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 0.25rem;\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: #818080;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);\n  }\n`;\n\nexport const NavLinkStyled = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  font-weight: 600;\n  transition: color 0.3s ease;\n  &:hover {\n    color: #f39c1c;\n  }\n`;\n\nexport const AdditionalList = styled.ul`\n  display: flex;\n  list-style: none;\n  flex-direction: column;\n  text-decoration: none;\n`;\n\nexport const AdditionalItem = styled.li``;\n","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from '../../services/api.js';\nimport { useParams, Routes, Route, useLocation } from 'react-router-dom';\nimport { Cast } from 'pages/Cast/Cast';\nimport { Reviews } from 'pages/Reviews/Reviews';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Block,\n  Image,\n  InfoBlock,\n  Title,\n  LinkStyled,\n  NavLinkStyled,\n  AdditionalList,\n  AdditionalItem,\n} from './MovieDetails.styled.jsx';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nfunction MovieDetails() {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState('');\n\n  const location = useLocation();\n  const goBackLink = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getMovieInfoById(moviesId);\n        setMovie(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getMovies();\n  }, [moviesId]);\n\n  const { poster_path, title, vote_average, genres, overview } = movie;\n\n  return (\n    <>\n      <LinkStyled to={goBackLink}>Go back</LinkStyled>\n      {movie && (\n        <Block>\n          {poster_path ? (\n            <Image src={`${TheMovieDbAPI.IMG_URL + poster_path}`} alt={title} />\n          ) : (\n            <Loader />\n          )}\n          <InfoBlock>\n            <h1>{title}</h1>\n            <p>User score: {Math.round(vote_average * 10)} %</p>\n            <p>\n              <b>Overview: </b>\n              {overview}\n            </p>\n            {genres && (\n              <p>\n                <b>Genres: </b>\n                {genres.map(genre => genre.name).join(', ')}\n              </p>\n            )}\n          </InfoBlock>\n        </Block>\n      )}\n      {error && <p>Error{error}</p>}\n      <Title>Additional information</Title>\n      <AdditionalList>\n        <AdditionalItem>\n          <NavLinkStyled\n            to={`cast`}\n            state={{ from: location?.state?.from ?? '/' }}\n          >\n            Cast\n          </NavLinkStyled>\n        </AdditionalItem>\n        <AdditionalItem>\n          <NavLinkStyled\n            to={`reviews`}\n            state={{ from: location?.state?.from ?? '/' }}\n          >\n            Reviews\n          </NavLinkStyled>\n        </AdditionalItem>\n      </AdditionalList>\n\n      <Routes>\n        <Route path=\"cast\" element={<Cast />} />\n        <Route path=\"reviews\" element={<Reviews />} />\n      </Routes>\n    </>\n  );\n}\n\nMovieDetails.propTypes = {\n  moviesId: PropTypes.number,\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nexport class TheMovieDbAPI {\n  static API_KEY = '79209162ecc142c272c8ee9a86025795';\n  static BASE_URL = 'https://api.themoviedb.org/3';\n  static IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  constructor() {\n    this.page = 1;\n    this.query = null;\n    this.per_page = 20;\n  }\n\n  async getPopularFilms(pageNumber) {\n    this.page = pageNumber;\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/trending/movie/week`,\n      {\n        params: {\n          api_key: TheMovieDbAPI.API_KEY,\n          page: this.page,\n        },\n      }\n    );\n\n    return response;\n  }\n\n  async fetchUniqFilms(query) {\n    const searchParams = {\n      params: {\n        language: 'en-US',\n        page: this.page,\n        query: this.query,\n        api_key: TheMovieDbAPI.API_KEY,\n      },\n    };\n\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/search/movie`,\n      searchParams\n    );\n\n    return response;\n  }\n\n  async getMovieInfoById(id) {\n    const response = await axios.get(`${TheMovieDbAPI.BASE_URL}/movie/${id}?`, {\n      params: {\n        api_key: TheMovieDbAPI.API_KEY,\n      },\n    });\n\n    return response;\n  }\n\n  async getCastInfo(id) {\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/movie/${id}/credits?`,\n      {\n        params: {\n          api_key: TheMovieDbAPI.API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n\n    return response;\n  }\n\n  async getReviews(id) {\n    const response = await axios.get(\n      `${TheMovieDbAPI.BASE_URL}/movie/${id}/reviews?`,\n      {\n        params: {\n          api_key: TheMovieDbAPI.API_KEY,\n          language: 'en-US',\n          page: this.page,\n        },\n      }\n    );\n    return response;\n  }\n}\n"],"names":["Title","styled","CastList","CastItem","Block","Image","Text","CastName","theMovieDbAPI","TheMovieDbAPI","Cast","moviesId","useParams","useState","cast","setCast","error","setError","useEffect","getCast","getCastInfo","data","length","message","slice","map","profile_path","src","alt","name","Loader","character","id","ReviewsList","ReviewsItem","Reviews","reviews","setReviews","getReviews","results","review","author","content","InfoBlock","LinkStyled","Link","NavLinkStyled","NavLink","AdditionalList","AdditionalItem","movie","setMovie","location","useLocation","goBackLink","state","from","getMovies","getMovieInfoById","poster_path","title","vote_average","genres","overview","to","Math","round","genre","join","path","element","this","page","query","per_page","pageNumber","axios","BASE_URL","params","api_key","API_KEY","response","searchParams","language","IMG_URL"],"sourceRoot":""}